<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="computers:general"><title>Computer management</title>

<section id="computers::hostaccounts">
	<title>Management of computer accounts in &ucsUMC;</title>
	<para>
		All UCS, Linux and Windows systems within a UCS domain each have a
		computer domain account (also referred to as the host account) with which the
		systems can authenticate themselves among each other and with which they can
		access the LDAP directory.
	</para>
	<para>
		The computer account is generally created automatically when the system
		joins the UCS domain (see <xref linkend="domaenenbeitritt"/>); however,
		the computer account can also be added prior to the domain join.
	</para>

	<para>
	  The password for the computer account is generated automatically during the domain join and
	  saved in the <filename>/etc/machine.secret</filename> file.  In the default setting, the
	  password consists of 20 characters (can be configured via the &ucsUCRV;
	  <envar>machine/password/length</envar>). The password is regenerated
	  automatically at fixed intervals (default setting: 21 days; can be configured using the
	  &ucsUCRV; <envar>server/password/interval</envar>). Password rotation can also be disabled
	  using the variable <envar>server/password/change</envar>.
	</para>

	<para>
		There is an different computer object type for every system role. Further
		information on the individual system roles can be found in <xref
		linkend="systemrollen"/>.
	</para>
	<para>
		Computer accounts are managed in the UMC module <guimenu>Computers</guimenu>.
	</para>

	<para>
	  In the default setting, a simplified wizard for creating a computer is shown, which only requests
	  the most important settings. All attributes can be shown by clicking on
	  <guimenu>Advanced</guimenu>. If there is a DNS forward zone and/or a DNS reverse zone (see
	  <xref linkend="networks:dns"/>) assigned to the selected network object (see <xref
	  linkend="networks::introduction"/>), a host record and/or pointer record is automatically
	  created for the host. If there is a DHCP service configured for the network object and a MAC
	  address is configured, a DHCP host entry is created (see <xref linkend="module:dhcp:dhcp"/>).
	</para>

	<para>
	  The simplified wizard can be disabled for all system roles by setting the &ucsUCRV;
	  <envar>directory/manager/web/modules/computers/computer/wizard/disabled</envar> to
	  <literal>true</literal>.
	</para>

	<figure id="computers-create">
		<title>Creating a computer in UMC</title>
		<graphic scalefit="1" width="65%" align="center" fileref="illustrations44/computers_computer_en.png"/>
	</figure>
	<figure id="computers-create-advanced">
		<title>Advanced computer settings</title>
		<graphic scalefit="1" width="90%" align="center" fileref="illustrations44/computers_computer_advanced_en.png"/>
	</figure>
	<table>
		<title>'General' tab</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Name</entry>
					<entry>
						<para>
							The name for the host should be entered in this input field.
						</para>
						<para>
							To guarantee compatibility with different operating systems and
							services, computer names should only contain the lowercase letters
							<emphasis>a</emphasis> to <emphasis>z</emphasis>, numbers, hyphens and
							underscores. Umlauts and special characters are not permitted. The full stop is
							used as a separating mark between the individual components of a fully
							qualified domain name and must therefore not appear as part of the computer
							name. Computer names must begin with a letter.
						</para>
						<para>
							Microsoft Windows accepts computer names with a maximum of 13
							characters, so as a rule computer names should be limited to 13 characters if
							there is any chance that Microsoft Windows will be used.
						</para>
						<para>
						  After creation, the computer name can only be changed for the system roles
						  <emphasis>Windows Workstation/Server</emphasis>, <emphasis>Mac OS X
						  Client</emphasis> and <emphasis>IP managed client</emphasis>.
						</para>
					</entry>
				</row>
				<row>
					<entry>Description</entry>
					<entry>
						Any description can be entered for the host in this input field.
					</entry>
				</row>
				<row>
					<entry>Inventory number</entry>
					<entry>
						Inventory numbers for hosts can be stored here.
					</entry>
				</row>
				<row>
					<entry>Network</entry>
					<entry>
						The host can be assigned to a existing network object. Information
						on the IP configuration can be found in <xref
						linkend="networks::introduction"/>.
					</entry>
				</row>
				<row>
					<entry>MAC address</entry>
					<entry>
						The MAC address of the computer can be entered here e.g.,
						<systemitem class="etheraddress">2e:44:56:3f:12:32</systemitem>. If the computer is to receive a DHCP
						entry, the entry of the MAC address is essential.
					</entry>
				</row>
				<row>
					<entry>IP address</entry>
					<entry>
						<para>
							Fixed IP addresses for the host can be given here. Further
							information on the IP configuration can be found in <xref
							linkend="networks::introduction"/>.
						</para>
						<para>
							If a network was selected on the <guimenu>General</guimenu> tab,
							the IP address assigned to the host from the network will be shown here
							automatically.
						</para>
						<para>
							An IP address entered here (i.e. in the LDAP directory) can only
							be transferred to the host via DHCP. If no DHCP is being used, the IP address
							must be configured locally, see <xref linkend="hardware::networkconfiguration"/>.
						</para>
						<para>
							If the IP addresses entered for a host are changed without the
							DNS zones being changed, they are automatically changed in the computer object
							and - where they exist - in the DNS entries of the forward and reverse
							lookup zones. If the IP address of the host was entered at other places as
							well, these entries must be changed manually! For example, if the IP address
							was given in a DHCP boot policy instead of the name of the boot server, this IP
							address will need to be changed manually by editing the policy.
						</para>
					</entry>
				</row>
				<row>
					<entry>Forward zone for DNS entry</entry>
					<entry>
						The DNS forward zone in which the computer is entered. The zone is
						used for the resolution of the computer name in the assigned IP
						address. Further information on the IP configuration can be found in
						<xref linkend="networks::introduction"/>.
					</entry>
				</row>
				<row>
					<entry>Reverse zone for DNS entry</entry>
					<entry>
						The DNS reverse zone in which the computer is entered. The zone is
						used to resolve the computer's IP address in a computer name. Further
						information on the IP configuration can be found in <xref linkend="networks::introduction"/>.
					</entry>
				</row>
				<row>
					<entry>DHCP service</entry>
					<entry>
						<para>
							If a computer is supposed to procure its IP address via DHCP, a
							DHCP service must be assigned here. Information on the IP configuration can be
							found in <xref linkend="networks::introduction"/>.
						</para>
						<para>
							During assignment, it must be ensured that the DHCP servers of
							the DHCP service object are responsible for the physical network.
						</para>
						<para>
							If a network is selected on the <guimenu>General</guimenu> tab an
							appropriate entry for the network will be added automatically. It can be
							adapted subsequently.
						</para>
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'Account' tab' (advanced settings)</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Password</entry>
					<entry>
						<para>
							The password for the computer account is usually automatically
							created and rotated. For special cases such as the integration of external
							systems it can also be explicitly configured in this field.
						</para>
						<para>
							The same password must then also be entered locally on the
							computer in the <filename>/etc/machine.secret</filename> file.
						</para>
					</entry>
				</row>
				<row>
					<entry>Primary group</entry>
					<entry>
						The primary group of the host can be selected in this selection
						field. This is only necessary when they deviate from the automatically created
						default values. The default value for a DC master or DC backup is <systemitem class="groupname">DC
						Backup Hosts</systemitem>, for a DC slave <systemitem class="groupname">DC Slave Hosts</systemitem> and
						for member servers <systemitem class="groupname">Computers</systemitem>.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'Unix account' tab (advanced settings)</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Unix home directory (*)</entry>
					<entry>
						A different input field for the host account can be entered
						here. The automatically created default value for the home directory is
						<filename class="devicefile">/dev/null</filename>
					</entry>
				</row>
				<row>
					<entry>Login shell</entry>
					<entry>
						If a different login shell from the default value is to be used for
						the computer account, the login shell can be adapted manually in this input
						field. The automatically set default value assumes a login shell of
						<filename>/bin/sh</filename>.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'Services' tab (advanced settings)</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Service</entry>
					<entry>
						By means of a service object, applications or services can
						determine whether a service is available on a computer or generally in the
						domain.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<note>
		<simpara>
		The tab 'Services' is only displayed on UCS server system roles.
		</simpara>
	</note>
	<table>
		<title>'Deployment' tab (advanced settings)</title>
		<tgroup cols="1">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<tbody>
				<row>
					<entry>
						This tab is used for the Univention Net Installer, see <biblioref linkend="ext-doc-inst"/>.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'DNS alias' tab (advanced settings)</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>Zone for DNS Alias</entry>
					<entry>
						If a zone entry for forward mapping has been set up for the host in
						the <guimenu>Forward zone for DNS entry</guimenu> field, the additional alias
						entries via which the host can be reached can be configured here.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'Groups' tab (advanced settings)</title>
		<tgroup cols="1">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<tbody>
				<row>
					<entry>
						The computer can be added into different groups in this tab.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'Nagios services' tab (advanced settings)</title>
		<tgroup cols="1">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<tbody>
				<row>
					<entry>
						This tab is used to specify which Nagios tests should be performed for this
						computer, see <xref linkend="nagios::hostconfig"/>.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'Nagios notification' tab (advanced settings)</title>
		<tgroup cols="1">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<tbody>
				<row>
					<entry>
						This tab is used to specify which users should be informed if Nagios tests
						should fail, see <xref linkend="nagios::hostconfig"/>.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<table>
		<title>'(Options)' tab</title>
		<tgroup cols="2">
			<colspec colnum="1" colname="col1" colwidth="1*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry>Attribute</entry>
					<entry>Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry namest="col1" nameend="col2">
						This tab allows to disable LDAP object classes for host objects.
						The entry fields for attributes of disables object classes are no longer shown.
						Not all object classes can be modified subsequently.
					</entry>
				</row>
				<row>
					<entry>Kerberos principal</entry>
					<entry>
						If this checkbox is not selected the host does not receive the
						<classname>krb5Principal</classname> and <classname>krb5KDCEntry</classname> object
						classes.
					</entry>
				</row>
				<row>
					<entry>POSIX account</entry>
					<entry>
						If this checkbox is not selected the host does not receive the
						<classname>posixAccount</classname> object class.
					</entry>
				</row>
				<row>
					<entry>Nagios support</entry>
					<entry>
						If this checkbox is selected Nagios checks can be activated for this host.
					</entry>
				</row>
				<row>
					<entry>Samba account</entry>
					<entry>
						If this checkbox is not selected the host does not receive the
						<classname>sambaSamAccount</classname> object class.
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>

	<section id="computers:ubuntu">
		<title>Integration of Ubuntu clients</title>
		<para>
			Ubuntu clients can be managed in &ucsUMC; with their own system role. The
			network properties for DNS/DHCP can also be managed via &ucsUMC;.
		</para>
		<para>
			The use of policies is not supported.
		</para>
		<para>
			Some configuration adjustments need to be performed on Ubuntu systems;
			these are documented in the extended documentation <biblioref
			linkend="ext-doc-domain"/>.
		</para>
	</section>
</section>

<section id="computers:Configuration_of_hardware_and_drivers">
	<title>Configuration of hardware and drivers</title>

	<section id="computers:Available_kernel_variants">
		<title>Available kernel variants</title>
		<para>
			The standard kernel in UCS 4.4 is based on the Linux kernel 4.9.
			In principle, there are three different types of kernel packages:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
				A <emphasis>kernel image package</emphasis> provides an executable
				kernel which can be installed and started.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				A <emphasis>kernel source package</emphasis> provides the source code
				for a kernel. From this source, a tailor-made kernel can be created, and
				functions can be activated or deactivated.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				A <emphasis>kernel header package</emphasis> provides interface
				information which is required by external packages if these have to access
				kernel functions. This information is usually necessary for compiling external
				kernel drivers.
				</simpara>
			</listitem>
		</itemizedlist>
		<para>
			Normally, the operation of a UCS system only requires the installation of
			one kernel image package.
		</para>
		<para>
			The default kernel in UCS for i386-based systems is the so-called
			<wordasword>bigmem kernel</wordasword> for processors with PAE support, which
			supports 64 GB RAM. For older i386-based systems a second kernel without PAE
			support is provided, which only supports up to 4 GB RAM. The standard kernel
			for amd64 systems has no such limits.
		</para>
		<para>
			Several kernel versions can be installed in parallel. This makes sure
			that there is always an older version available to which can be reverted in
			case of an error. So-called meta packages are available which always refer to
			the kernel version currently recommended for UCS. In case of an update, the new
			kernel version will be installed, making it possible to keep the system up to
			date at any time.
		</para>
		<para>
			The following meta packages are available under i386 / 32 bit:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
					<package>univention-kernel-image</package> - Standard kernel with support up to 64 GB RAM
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					<package>univention-kernel-image-486</package> - Kernel for systems without PAE support (max. 4 GB RAM)
				</simpara>
			</listitem>
		</itemizedlist>
		<para>
			The following meta packages are available under amd64 / 64 bit:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
					<package>univention-kernel-image</package> - Standard kernel
				</simpara>
			</listitem>
		</itemizedlist>
	</section>

	<section id="computers:Hardware_drivers__kernel_modules">
		<title>Hardware drivers / kernel modules</title>
		<para>
			The boot process occurs in two steps using an initial ramdisk ('initrd' for
			short). This is composed of an archive with further drivers and programs.
		</para>
		<para>
			The GRUB boot manager (see <xref linkend="grub"/>) loads the kernel and
			the initrd into the system memory, where the initrd archive is extracted and
			mounted as a temporary root file system. The real root file system is then
			mounted from this, before the temporary archive is removed and the system start
			implemented.
		</para>
		<para>
			The drivers to be used are recognized automatically during system start and
			loaded via the <application>udev</application> device manager. At this point, the necessary device links
			are also created under <filename class="directory">/dev/</filename>. If drivers are not
			recognized (which can occur if no respective hardware IDs are registered or
			hardware is employed which cannot be recognized automatically, e.g., ISA
			boards), kernel modules to be loaded can be added via &ucsUCRV;
			<envar>kernel/modules</envar>. If more than one kernel module is to be loaded,
			these must be separated by a semicolon. The &ucsUCRV; <envar>kernel/blacklist</envar>
			can be used to configure a list of one or more kernel modules for which automatic
			loading should be prevented. Multiple entries must also be separated by a semicolon.
		</para>
		<para>
			Unlike other operating systems, the Linux kernel (with very few exceptions)
			provides all drivers for hardware components from one source. For this reason,
			it is not normally necessary to install drivers from external sources
			subsequently.
		</para>
		<para>
		  However, if external drivers / kernel modules are required, they can be integrated via the
		  DKMS framework (Dynamic Kernel Module Support). This provides a standardized interface for
		  kernel sources, which are then built automatically for every installed kernel (insofar as
		  the source package is compatible with the respective kernel). For this to happen, the
		  kernel header package <package>univention-kernel-headers</package> must be
		  installed in addition to the <package>dkms</package> package. Please note that not all
		  the external kernel modules are compatible with all kernels.
		</para>
	</section>

	<section id="grub">
		<title>GRUB boot manager</title>
		<para>
			In &ucsUCS; GNU GRUB 2 is used as the boot manager. GRUB provides a menu
			which allows the selection of a Linux kernel or another operating system to be
			booted. GRUB can also access file systems directly and can thus, for example,
			load another kernel in case of an error.
		</para>
		<figure id="grub-selection"><title>GRUB menu</title>
		  <graphic scalefit="1" width="80%" align="center" fileref="illustrations44/computers_grub.png"/>
		</figure>
		<para>
			GRUB gets loaded in a two-step procedure; in the Master
			Boot Record of the hard drive, the Stage 1 loader is written which refers to
			the data of Stage 2, which in turn manages the rest of the boot procedure.
		</para>
		<para>
			The selection of kernels to be started in the boot menu is stored in the
			file <filename>/boot/grub/grub.cfg</filename>. This file is generated
			automatically; all installed kernel packages are available for selection. The
			memory test program <command>Memtest86+</command> can be started by selecting the option
			<guimenu>Memory test</guimenu> and performs a consistency check for the main
			memory.
		</para>
		<para>
			There is a five second waiting period during which the kernel to be
			booted can be selected. This delay can be changed via the &ucsUCRV;
			<envar>grub/timeout</envar>.
		</para>
		<para>
			By default a screen of <wordasword>800x600</wordasword> pixels size and 16 Bit color depth is
			pre-set. A different value can be set via the &ucsUCRV;
			<envar>grub/gfxmode</envar>. Only resolutions are supported which can be set
			via VESA BIOS extensions. A list of available modes can be found at
			<ulink url="https://en.wikipedia.org/wiki/VESA_BIOS_Extensions"/>. The input must
			be specified in the format
			<userinput><replaceable>HORIZONTAL</replaceable>x<replaceable>VERTICAL</replaceable>@<replaceable>COLOURDEPTHBIT</replaceable></userinput>, so for example
			<literal>1024x768@16</literal>.
		</para>
		<para>
			Kernel options for the started Linux kernel can be passed with the
			&ucsUCRV; <envar>grub/append</envar>. &ucsUCRV; <envar>grub/xenhopt</envar> can
			be used to pass options to the Xen hypervisor.
		</para>
		<para>
			The graphic representation of the boot procedure - the so-called splash
			screen - can be deactivated by setting &ucsUCRV; <envar>grub/bootsplash</envar>
			to <literal>nosplash</literal>.
		</para>
		<para>
			Older Xen environments might use a version of PyGrub, which still
			requires the GRUB 1 configuration file <filename>/goot/grub/menu.lst</filename>
			to boot paravirtualized Xen systems. This file is generated automatically if
			it does not yet exist. This behavior can be deactivated by setting the
			&ucsUCRV; <envar>grub/generate-menu-lst</envar> to <literal>no</literal>.
		</para>
	</section>

	<section id="hardware::networkconfiguration">
		<title>Network configuration</title>

		<section id="computers:Network_interfaces">
			<title>Network interfaces</title>
			<para>
				The configuration of network interfaces can be adjusted in &ucsUMC;
				via the module <guimenu>Network settings</guimenu>.
			</para>
			<para>
				The configuration is saved in &ucsUCR; variables, which can also be set
				directly. These variables are listed in parentheses in the individual sections.
			</para>
			<figure id="network-settings">
				<title>Configuring the network settings</title>
				<graphic scalefit="1" width="90%" align="center" fileref="illustrations44/computers_network_en.png"/>
			</figure>
			<para>
				All the network cards available in the system are listed under
				<guimenu>IPv4 network devices</guimenu> and <guimenu>IPv6 network
				devices</guimenu> (only network interfaces in the <filename class="devicefile">ethX</filename>
				scheme are shown).
			</para>
			<para>
				Network interfaces can be configured for IPv4 and/or IPv6. IPv4
				addresses have a 32-bit length and are generally written in four blocks in
				decimal form (e.g., <systemitem class="ipaddress">192.0.2.10</systemitem>), whereas IPv6 addresses are four times as
				long and typically written in hexadecimal form (e.g.,
				<systemitem class="ipaddress">2001:0DB8:FE29:DE27:0000:0000:0000:0000</systemitem>).
			</para>

			<section id="computers:ipv4">
				<title>Configuration of IPv4 addresses</title>
				<para>
					If the <guimenu>Dynamic (DHCP)</guimenu> option was not chosen, the
					IP address to be bound to the network card must be entered. In addition to the
					<guimenu>IPv4 address</guimenu> the <guimenu>net mask</guimenu> must also be
					entered. <guimenu>DHCP query</guimenu> is used to request an address from a
					DHCP server. Unless the <guimenu>Dynamic (DHCP)</guimenu> option is activated,
					the values received from the DHCP request are configured statically.
				</para>
				<para>
					Server systems can also be configured via DHCP. This is necessary for
					some cloud providers, for example. If the assignment of an IP address for a
					server fails, a random link local address (<systemitem class="ipaddress">169.254.<replaceable>x</replaceable>.<replaceable>y</replaceable></systemitem>) is configured as a
					replacement.
				</para>
				<para>
					For UCS server systems the address received via DHCP is also written
					to the LDAP directory.
				</para>
				<note>
					<para>
					Not all services (e.g., DNS servers) are suitable for use on a
					DHCP-based server.
					</para>
				</note>
				<para>
					(UCR variables: <envar>interfaces/ethX/address</envar>,
					<envar>interfaces/ethX/netmask</envar>, <envar>interfaces/ethX/type</envar>)
				</para>
				<para>
					Besides the physical interfaces, additional virtual interfaces can
					also be defined in the form <envar>interfaces/ethX_Y/setting</envar>.
				</para>
			</section>

			<section id="computers:ipv6">
				<title>Configuration of IPv6 addresses</title>
				<para>
				  The IPv6 address can be configured in two ways: Stateless address
				  autoconfiguration (SLAAC) is employed in the <guimenu>Autoconfiguration
				  (SLAAC)</guimenu> configuration. In this, the IP address is assigned from the
				  routers of the local network segment. Alternatively, the address can also be
				  configured statically by entering the <guimenu>IPv6 address</guimenu> and
				  <guimenu>IPv6 prefix</guimenu>. In contrast to DHCP, in SLAAC there is no
				  assignment of additional data such as the DNS server to be used. There is an
				  additional protocol for this (DHCPv6), which, however, is not employed in the
				  dynamic assignment. One network card can be used for different IPv6 addresses. The
				  <guimenu>Identifier</guimenu> is a unique name for individual addresses. The main
				  address always uses the identifier <emphasis>default</emphasis>; functional
				  identifiers such as <emphasis>Interface mail server</emphasis> can be assigned for
				  all other addresses.
				</para>
				<para>
					(UCR variables: <envar>interfaces/ethX/ipv6/address</envar>,
					<envar>interfaces/ethX/ipv6/prefix</envar>,
					<envar>interfaces/eth0/ipv6/acceptRA</envar> activates SLAAC).
				</para>
				<para>
					Further network settings can be performed under <guimenu>Global
					network settings</guimenu>.
				</para>
				<para>
					The IP addresses for the standard gateways in the subnetwork can be
					entered under <guimenu>Gateway (IPv4)</guimenu> and <guimenu>Gateway
					(IPv6)</guimenu>. It is not obligatory to enter a gateway for IPv6, but
					recommended. A gateway configured here has preference over router
					advertisements, which might otherwise be able to change the route.
				</para>
				<para>
					(UCR variables: <envar>gateway</envar>, <envar>ipv6/gateway</envar>)
				</para>
			</section>

			<section id="computers:Configuring_the_name_servers">
				<title>Configuring the name servers</title>
				<para>
					There are two types of DNS servers:
				</para>
				<itemizedlist>
					<listitem>
						<simpara>
						An <guimenu>External DNS Server</guimenu> is employed for the
						resolution of host names and addresses outside of the UCS domain, e.g.,
						<systemitem class="domainname">univention.de</systemitem>. This is typically a name server operated by
						the Internet provider.
						</simpara>
					</listitem>
					<listitem>
						<simpara>
						A <guimenu>Domain DNS Server</guimenu> is a local name server in
						the UCS domain. This name server usually administrates host names and IP
						addresses belonging to the UCS domain. If an address is not found in the local
						inventory, an external DNS server is automatically requested. The DNS data are
						saved in the LDAP directory service, i.e., all domain DNS servers deliver
						identical data.
						</simpara>
					</listitem>
				</itemizedlist>
				<para>
					A local DNS server is set up on the &ucsMaster;, &ucsBackup; and
					&ucsSlave; system roles. Here, you can configure which server should be
					primarily used for the name resolution by entering the <guimenu>Domain DNS
					Server</guimenu>.
				</para>
				<para>
					(UCR variables: <envar>nameserver1</envar> to
					<envar>nameserver3</envar>, <envar>dns/forwarder1</envar> to
					<envar>dns/forwarder3</envar>,
				</para>
			</section>

			<section id="computers:networkcomplex">
			  <title>Configuration of bridges/bonding/VLANs</title>

			  <para>
				UCS supports advanced network configurations using bridging, bonding and virtual
				networks (VLAN):
			  </para>

			  <itemizedlist>
				<listitem><simpara>
				  Bridging is often used with virtualization to connect multiple virtual machines
				  running on a host through one shared physical network interface.
				</simpara></listitem>

				<listitem><simpara>
				  Bondings allows failover redundancy for hosts with multiple physical network
				  interfaces to the same network.
				</simpara></listitem>

				<listitem><simpara>
				  VLANs can be used to separate network traffic logically while using only one (or
				  more) physical network interface.
				</simpara></listitem>
			  </itemizedlist>

			  <section id="computers:networkcomplex:bridge">
				<title>Bridging
					<indexterm><primary>Network</primary><secondary>Bridge</secondary></indexterm>
					<indexterm><primary>Network</primary><secondary>Switch</secondary><see>Bridge</see></indexterm>
				</title>

				<para>
				  The most common application scenario for <emphasis>bridging</emphasis> is the
				  shared use of a physical network card by one or more virtual machines. Instead of
				  one network card for each virtual machine and the virtualization server
				  itself, all systems are connected via a shared uplink. A bridge can be compared
				  with a switch implemented in software which is used to connect the individual hosts
				  together. The hardware network adapter used is called a <emphasis>bridge
				  port</emphasis>.
				</para>

				<para>
				  In order to configure a bridge, <emphasis>Bridge</emphasis> must be selected as
				  the <guimenu>Interface type</guimenu> under <guimenu>Add</guimenu>.
				  The <guimenu>Name of new bridge interface</guimenu> can be selected at will. Then
				  click on <guimenu>Next</guimenu>.
				</para>

				<para>
				  The physical network card intended to act as the uplink can be selected under
				  <guimenu>Bridge ports</guimenu>. In the typical scenario of connecting
				  virtual machines via just one network card, there is no risk of a network loop.
				  If the bridge is used to connect two Ethernet networks, the spanning tree
				  protocol (STP) is employed to avoid network loops
				  <footnote><para>
					The Linux kernel only implements STP, not the Rapid STP or Multiple STP versions.
				  </para></footnote>.
				  The <guimenu>Forwarding delay</guimenu> setting configures the waiting time in
				  seconds during which information is collected about the network topology when a
				  connection is being made via STP. If the bridge is used for connecting virtual machines to
				  one physical network card, STP should be disabled by setting the value to
				  0. Otherwise problems may occur when using DHCP, as the packets sent during the
				  waiting time are not forwarded.
				</para>

				<para>
				  The <guimenu>Additional bridge options</guimenu> input field can be used to configure
				  arbitrary bridge parameters. This is only necessary in exceptional cases; an overview of
				  the possible settings can be found on the manual page
				  <citerefentry><refentrytitle>bridge-utils-interfaces</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
				</para>

				<para>
				  Clicking on <guimenu>Next</guimenu> offers the possibility of optionally assigning
				  the bridge an IP address. This interface can then also be used as a network
				  interface for the virtualization host. The options are the same as
				  described in <xref linkend="computers:ipv4"/> and <xref
				  linkend="computers:ipv6"/>.
				</para>
			  </section>

			  <section id="computers:networkcomplex:bonding">
				 <title>Bonding
					<indexterm><primary>Network</primary><secondary>Bonding</secondary></indexterm>
					<indexterm><primary>Network</primary><secondary>Link aggregation</secondary><see>Bonding</see></indexterm>
					<indexterm><primary>Network</primary><secondary>Etherchannel</secondary><see>Bonding</see></indexterm>
					<indexterm><primary>Network</primary><secondary>Teaming</secondary><see>Bonding</see></indexterm>
					<indexterm><primary>Network</primary><secondary>Trunking</secondary><see>Bonding</see></indexterm>
				 </title>

				<para>
				  <emphasis>Bonding</emphasis> can be used to bundle two (or more) physical network
				  cards in order to increase the performance or improve redundancy in failover
				  scenarios.
				</para>

				<para>
				  In order to configure a bonding, <emphasis>Bonding</emphasis> must be selected as
				  the <guimenu>Interface type</guimenu> under <guimenu>Add</guimenu>. The
				  <guimenu>Name of the bonding interface</guimenu> can be selected at will. Then
				  click on <guimenu>Next</guimenu>.
				</para>

				<para>
				  The network cards which form part of the bonding interface are selected under
				  <guimenu>Bond slaves</guimenu>. The network cards which should be given preference
				  in failover scenarios (see below) can be selected via <guimenu>Bond
				  primary</guimenu>.
				</para>

				<para>
				  The <guimenu>Mode</guimenu> configures the distribution of the network cards
				  within the bonding:

				  <itemizedlist>
					<listitem><simpara>
					  <guimenuitem>balance-rr (0)</guimenuitem> distributes the packets equally over the
					  available network interfaces within the bonding one after the other. This
					  increases performance and improves redundancy. In order to use this mode, the
					  network switches used must support <emphasis>link aggregation</emphasis>.
					</simpara></listitem>

					<listitem><simpara>
					  When <guimenuitem>active-backup (1)</guimenuitem> is used, only one network card is
					  active for each bonding interface (in the default setting this is the network
					  interface configured in <guimenu>Bond primary</guimenu>). If the primary network card
					  fails, this is detected by the Linux kernel, which switches to another card in
					  the bonding. This version increases redundancy. It can be used with
					  every network switch.
					</simpara></listitem>
				  </itemizedlist>

				  In addition, there are also a number of other bonding methods. These are generally
				  only relevant for special cases and are described under <xref linkend="bonding"/>.
				</para>

				<para>
				  The Media Independent Interface (MII) of the network cards is used to detect failed
				  network adapters. The <guimenu>MII link monitoring frequency</guimenu> setting
				  specifies the testing interval in milliseconds.
				</para>

				<para>
				  All other bonding parameters can be configured under <guimenu>Additional
				  bonding options</guimenu>. This is only necessary in exceptional cases; an
				  overview of the possible settings can be found under <xref linkend="bonding"/>.
				</para>

				<para>
				  Clicking on <guimenu>Next</guimenu> allows to optionally
				  assign the bonding interface an IP address. If one of the existing network
				  cards which form part of the bonding interface has already been assigned an IP
				  address, this configuration will be removed. The options are the same as
				  described in <xref linkend="computers:ipv4"/> and <xref
				  linkend="computers:ipv6"/>.
				</para>
			  </section>

			  <section id="computers:networkcomplex:vlan">
				<title>VLANs
					<indexterm><primary>Network</primary><secondary>VLAN</secondary></indexterm>
					<indexterm><primary>Network</primary><secondary>802.1q</secondary><see>VLAN</see></indexterm>
				</title>
				<para>
				  VLANs can be used to separate the network traffic in a physical network
				  logically over one or more virtual subnetworks. Each of these virtual networks is
				  an independent broadcast domain. This makes it e.g. possible to differentiate between
				  a network for the employees and a guest network for visitors in a company
				  network although they use the same physical cables. The individual end devices
				  can be assigned to the VLANs via the configuration of the switches. The
				  network switches must support 802.1q VLANs.
				</para>

				<para>
				  A distinction is made between two types of connections between network cards:
				</para>

				<itemizedlist>
				  <listitem>
					<para>
					  A connection only transports packets from a specific VLAN. In this case,
					  <firstterm>untagged</firstterm> data packets are transmitted.
					</para>

					<para>
					  This is typically the case if only one individual end device is connected via
					  this network connection.
					</para>
				  </listitem>

				  <listitem>
					<para>
					 A connection transports packets from several VLANs. This is also referred to
					 as a <firstterm>trunk link</firstterm>. In this case, each packet is assigned
					 to a VLAN using a VLAN ID. During transmission between trunk
					 links and specific VLANs, the network switch takes over the task of
					 filtering the packets by means of the VLAN IDs as well as adding and removing
					 the VLAN IDs.
					</para>

					<para>
					  This type of connection is primarily used between switches/servers.
					</para>

					<para>
					  Some switches also allow the sending of packets with and without VLAN tags
					  over a shared connection, but this is not described in more detail here.
					</para>
				  </listitem>
				</itemizedlist>

				<para>
				  When configuring a VLAN in &ucsUMC; it is possible to configure for a
				  computer which VLANs it wants to participate in. An example here would be an
				  internal company web server, which should be available both to the employees and
				  any users of the guest network.
				</para>

				<para>
				  In order to configure a VLAN, <emphasis>Virtual LAN</emphasis> must be selected
				  as the <guimenu>Interface type</guimenu> under <guimenu>Add</guimenu>.
				  The network interface for which the VLAN is configured is
				  specified with <guimenu>Parent interface</guimenu>. The <guimenu>VLAN
				  ID</guimenu> is the unique identifier of the VLAN. Valid values are from 1 to
				  4095. Then <guimenu>Next</guimenu> must be clicked.
				</para>

				<para>
				  Clicking on <guimenu>Next</guimenu> allows to optionally assign the VLAN interface
				  an IP address. The options are the same as described in <xref
				  linkend="computers:ipv4"/> and <xref linkend="computers:ipv6"/>. When assigning an
				  IP address, ensure that the address matches the assigned VLAN address range.
				</para>
			  </section>
			</section>
		</section>

		<section id="computers:Configuring_proxy_access">
			<title>Configuring proxy access</title>
			<para>
				The majority of the command line tools which access web servers (e.g.,
				<command>wget</command>, <command>elinks</command> or <command>curl</command>)
				check whether the environment variable <command>http_proxy</command> is set. If
				this is the case, the proxy server set in this variable is used automatically.
			</para>
			<para>
				The &ucsUCRV; <envar>proxy/http</envar> can also be used to activate the
				setting of this environment variable via an entry in
				<filename>/etc/profile</filename>.
			</para>
			<para>
				The proxy URL must be specified for this, e.g.,
				<uri>http://192.0.2.100</uri>. The proxy port can be specified in the proxy
				URL using a colon, e.g., <uri>http://192.0.2.100:3128</uri>. If the proxy
				requires authentication for the accessing user, this can be provided in the
				form <uri>http://username:password@192.0.2.100</uri>.
			</para>
			<para>
				The environment variable is not adopted for sessions currently opened. A
				relogin is required for the change to be activated.
			</para>
			<para>
				The Univention tools for software updates also support operation via a proxy
				and query the &ucsUCR; variable.
			</para>
			<para>
				Individual domains can be excluded from use by the proxy by including them
				separated by commas in the &ucsUCRV; <envar>proxy/no_proxy</envar>. Subdomains
				are taken into account; e.g. an exception for <uri>software-univention.de</uri> also
				applies for <uri>updates.software-univention.de</uri>.
			</para>
		</section>
	</section>

	<section id="computers:Configuration_of_the_monitor_settings">
		<title>Configuration of the monitor settings</title>
		<para>
			The configuration of the graphic resolutions and monitor parameters is
			performed via automatic detection of the graphics card and the monitor in the
			default setting. When this is done, the best available driver for the graphics
			card is selected automatically and the monitor resolution set to the highest
			value supported by the monitor.
		</para>
		<para>
			The settings can be set with a &ucsUCR; policy. Manual configuration is also necessary if dual monitor operation is to be
			used. The following provides a selection of the important settings and the
			corresponding UCR variables in parentheses:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
				<guimenu>Graphics adapter driver</guimenu> selects the responsible Xorg
				driver (<envar>xorg/device/driver</envar>).
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				The screen resolution of the main monitor should be entered under
				<guimenu>Resolution of primary monitor</guimenu>. The values for width and
				height in pixels should be separated by an 'x', e.g.,
				<literal>1024x768</literal> (<envar>xorg/resolution</envar>).
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				<guimenu>Resolution of secondary display</guimenu> defines the screen
				resolution of a second monitor, if present. This combines with the primary
				monitor to display a shared screen area
				(<envar>xorg/resolution/secondary</envar>).
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				The <guimenu>Position of secondary display</guimenu> menu specifies the
				relative position of the secondary monitor with respect to the primary monitor
				(<envar>xorg/display/relative-position</envar>).
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				The <guimenu>Color depth</guimenu> should be entered in bits per
				pixel. Admissible values are 1, 2, 4, 8, 16 and 24. (24-bit is true color
				color depth) (<envar>xorg/screen/DefaultDepth</envar>).
				</simpara>
			</listitem>
		</itemizedlist>
	</section>

	<section id="computers:Mounting_NFS_shares">
		<title>Mounting NFS shares</title>
		<para>
			The <guimenu>NFS mounts</guimenu> policy of the UMC computer management
			can be used to configure NFS shares, which are mounted on the
			system. There is a <guimenu>NFS share</guimenu> for selection, which is mounted
			in the file path specified under <guimenu>Mount point</guimenu>.
		</para>
		<figure id="nfs-mount">
			<title>Mounting a NFS share</title>
			<graphic scalefit="1" width="100%" fileref="illustrations44/computers_policy_nfsshare_en.png"/>
		</figure>
	</section>

	<section id="computers:hardware:sysinfo">
		<title>Collection of list of supported hardware</title>
		<para>
			Univention collects information about hardware which is compatible with UCS and in use by customers.
			The information processed for this is gathered by the UMC module <guimenu>System information</guimenu>.
		</para>
		<para>
			All files are forwarded to Univention anonymously and only transferred once
			permission has been received from the user.
		</para>
		<para>
			The start dialogue contains the entry fields <guimenu>Manufacturer</guimenu>
			and <guimenu>Model</guimenu>, which must be completed with the values
			determined from the DMI information of the hardware. The fields can also be
			adapted and an additional <guimenu>Descriptive comment</guimenu> added.
		</para>
		<para>
			If the system information is transferred as part of a support request, the
			<guimenu>This is related to a support case</guimenu> option should be
			activated. A ticket number can be entered in the next field; this facilitates
			assignment and allows quicker processing.
		</para>
		<para>
			Clicking on <guimenu>Next</guimenu> offers an overview of the transferred
			system information. In addition, a compressed .tar archive is created, which
			contains a list of the hardware components used in the system and can be
			downloaded via <guimenu>Archive with system information</guimenu>.
		</para>
		<para>
			Clicking on <guimenu>Next</guimenu> again allows you to select the way the data
			are transferred to Univention. <guimenu>Upload</guimenu> transmits the data via
			HTTPS, <guimenu>Send mail)</guimenu> opens a dialogue, which lists the needed
			steps to send the archive via e-mail.
		</para>
	</section>
</section>

<section id="computers:Administration_of_local_system_configuration_with_Univention_Configuration_Registry">
	<title>
	Administration of local system configuration with Univention Configuration Registry
	</title>

	<section id="computers:ucr:Introduction">
		<title>Introduction</title>
		<para>
			&ucsUCR; is the central tool for managing the local system configuration of a
			UCS-based system. Direct editing of the configuration files is usually not
			necessary.
		</para>
		<para>
			Settings are specified in a consistent format in a registry mechanism, the
			so-called <emphasis>Univention Configuration Registry
			variables</emphasis>. These variables are used to generate the configuration
			files used effectively by the services/programs from the configuration
			templates (the so-called <emphasis>Univention Configuration Registry
			templates</emphasis>).
		</para>
		<para>
			This procedure offers a range of advantages:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
				It is not usually necessary to edit any configuration files
				manually. This avoids errors arising from invalid syntax of configuration
				settings or similar.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				There is a uniform interface for editing the settings and the different
				syntax formats of the configuration files are hidden from the administrator.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				Settings are decoupled from the actual configuration file, i.e., if a
				software uses a different configuration format in a new version, a new template
				in a new format is simply delivered instead of performing time-consuming and
				error-prone conversion of the file.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				The variables used in a configuration file administrated with &ucsUCR;
				are registered internally. This ensures that when a UCR variable is changed,
				all the configuration files containing the changed variable are recreated.
				</simpara>
			</listitem>
		</itemizedlist>
		<para>
			&ucsUCR; variables can be configured in the command line using the
			<command>univention-config-registry</command> command (short form:
			<command>ucr</command> or via &ucsUMC;.
		</para>
		<para>
			As the majority of packages perform their configuration via &ucsUCR; and the
			corresponding basic settings need to be set up during the installation,
			hundreds of &ucsUCR; variables are already set after the installation of a UCS
			system.
		</para>
		<para>
			UCR variables can also be used efficiently in shell scripts for
			accessing current system settings.
		</para>
		<para>
			The variables are named according to a tree structure with a forward slash
			being used to separate components of the name. For example, &ucsUCR; variables
			beginning with <literal>ldap</literal> are settings which apply to the local
			directory service.
		</para>
		<para>
			A description is given for the majority of variables explaining their use.
		</para>
		<para>
			If a configuration file is administrated by a UCR template and the required
			setting has not already been covered by an existing variable, the UCR template
			should be edited instead of the configuration file. If the configuration were
			directly adapted, the next time the file is regenerated - e.g., when a
			registered UCR variable is set - the local modification will be overwritten
			again. Adaptation of UCR templates is described in <xref
			linkend="ucr::templates::extend"/>.
		</para>
		<para>
			Part of the settings configured in &ucsUCR; are system-specific (e.g., the
			computer name); many settings can, however, be used on more then one
			computer. The &ucsUCR; policy in the domain administration of &ucsUMC; can be
			used to compile variables and apply them on more than one computer.
		</para>
		<para>
			The evaluation of the &ucsUCR; variables on a UCS system comprises four stages:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
				First the local &ucsUCR; variables are evaluated.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				The local variables are overruled by policy variables which are usually
				sourced from the directory service
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				The <option>--schedule</option> option is used to set local
				variables which are only intended to apply for a certain period of time. This
				level of the &ucsUCR; is reserved for local settings which are automated by
				time-controlled mechanisms in &ucsUCS;.
				</simpara>
			</listitem>
			<listitem>
				<para>
				When the <option>--force</option> option is used in setting a
				local variable, settings adopted from the directory service and variables from
				the schedule level are overruled and the given value for the local system fixed
				instead. An example:
				</para>
				<programlisting language="sh">
univention-config-registry set --force mail/messagesizelimit=1000000
				</programlisting>
			</listitem>
		</itemizedlist>
		<para>
			If a variable is set which is overwritten by a superordinate policy, a warning
			message is given.
		</para>
		<para>
			The use of the &ucsUCR; policy is documented in the <xref
			linkend="ucr::templates::policy"/>.
		</para>
	</section>

	<section id="computers:Using_the_Univention_Management_Console_web_interface">
		<title>Using the &ucsUMC; web interface</title>
		<para>
			The UMC module <guimenu>Univention Configuration Registry</guimenu>
			can be used to display and adjust the variables of a system. There is also the
			possibility of setting new variables using <guimenu>Add new variable</guimenu>.
		</para>
		<para>
			A search mask is displayed on the start page. All variables are classified
			using a <guimenu>Category</guimenu>, for example all LDAP-specific settings.
		</para>
		<para>
			The <guimenu>Search attribute</guimenu> can be entered as a filter in the
			search mask, which can refer to the variable name, value or description.
		</para>
		<para>
			Following a successful search, the variables found are displayed in a
			table with the variable name and the value.
			A detailed description of the variable is displayed when moving the mouse cursor over
			the variable name.
		</para>
		<para>
			Clicking on the icon with the stylized pen edits the setting of a variable. The
			icon with the stylized minus sign allows the deletion of a variable.
		</para>
	</section>

	<section id="computers:Using_the_command_line_front_end">
		<title>Using the command line front end</title>
		<para>
			The command line interface of &ucsUCR; is run using the
			<command>univention-config-registry</command> command. Alternatively, the short
			form <command>ucr</command> can be used.
		</para>

		<section id="computers:Querying_a_UCR_variable">
			<title>Querying a UCR variable</title>
			<para>
				A single &ucsUCR; variable can be queried with the parameter
				<option>get</option>:
			</para>
			<programlisting language="sh">
univention-config-registry get ldap/server/ip
			</programlisting>
			<para>
				The parameter <option>dump</option> can also be used to display all
				currently set variables:
			</para>
			<programlisting language="sh">
univention-config-registry dump
			</programlisting>

			<section id="computers:Setting_UCR_variables">
				<title>Setting UCR variables</title>
				<para>
					The parameter <option>set</option> is used to set a variable. The variable
					can be given any name consisting exclusively of letters, full stops, figures,
					hyphens and forward slashes.
				</para>
				<programlisting language="sh">
univention-config-registry set VARIABLENAME=VALUE
				</programlisting>
				<para>
					If the variable already exists, the content is updated; otherwise, a new entry
					is created.
				</para>
				<para>
					The syntax is not checked when a &ucsUCR; variable is set. The change to a
					variable results in all configuration files for which the variable is
					registered being rewritten immediately. The files in question are output on
					the console:
				</para>
				<para>
					In doing so it must be noted that although the configuration of a service is
					updated, the service in question is not restarted automatically! The restart
					must be performed manually.
				</para>
				<para>
					It is also possible to perform simultaneous changes to several variables in one
					command line. If these refer to the same configuration file, the file is only
					rewritten once.
				</para>
				<programlisting language="sh">
univention-config-registry set \
    dns/forwarder1=192.0.2.2 \
    sshd/xforwarding="no" \
    sshd/port=2222
				</programlisting>
				<para>
					A conditional setting is also possible. For example, if a value should only be
					saved in a &ucsUCR; variable when the variable does not yet exist, this can be
					done by entering a question mark instead of the equals sign when assigning
					values.
				</para>
				<programlisting language="sh">
univention-config-registry set dns/forwarder1?192.0.2.2
				</programlisting>
			</section>

			<section id="computers:Searching_for_variables_and_set_values">
				<title>Searching for variables and set values</title>
				<para>
					The <parameter class="command">search</parameter> parameter can be used to search for a
					variable. This command searches for variable names which contain
					<wordasword>nscd</wordasword> and displays these with their current assignments:
				</para>
				<programlisting language="sh">
univention-config-registry search nscd
				</programlisting>
				<para>
					Alternatively, searches can also be performed for set variable values. This
					request searches for all variables set to
					<literal>master.example.com</literal>:
				</para>
				<programlisting language="sh">
univention-config-registry search --value master.example.com
				</programlisting>
				<para>
					Search templates in the form of regular expressions can also be used in the
					search. The complete format is documented at
					<ulink url="https://docs.python.org/2/library/re.html"/>.
				</para>
			</section>

			<section id="computers:Deleting_UCR_variables">
				<title>Deleting UCR variables</title>
				<para>
					The parameter <parameter class="command">unset</parameter> is used to delete a variable. The
					following example deletes the variable <envar>dns/forwarder2</envar>. It
					is also possible here to specify several variables to be deleted:
				</para>
				<programlisting language="sh">
univention-config-registry unset dns/forwarder2
				</programlisting>
			</section>

			<section id="computers:Regeneration_of_configuration_files_from_their_template">
				<title>Regeneration of configuration files from their template</title>
				<para>
					The <parameter class="command">commit</parameter> parameter is used to regenerate a configuration
					file from its template. The name of the configuration file is entered as a
					parameter, e.g.:
				</para>
				<programlisting language="sh">
univention-config-registry commit /etc/samba/smb.conf
				</programlisting>
				<para>
					As UCR templates are generally regenerated automatically when UCR variables are
					edited, this is primarily used for tests.
				</para>
				<para>
					If no file name is given when running <command>ucr commit</command>, all of the
					files managed by &ucsUCR; will be regenerated from the templates. It is,
					however, not generally necessary to regenerate all the configuration files.
				</para>
			</section>

			<section id="computers:Sourcing_variables_in_shell_scripts">
				<title>Sourcing variables in shell scripts</title>
				<para>
					The parameter <option>shell</option> is used to display &ucsUCR;
					variables and their current assignments in a format that can be used in shell
					scripts.
				</para>
				<programlisting language="sh">
univention-config-registry shell ldap/server/name
				</programlisting>
				<para>
					Different conversions are involved in this: forward slashes in variable names
					are replaced with underscores and characters in the values which have a
					particular significance in shell scripts are included in quotation marks to
					ensure they are not altered.
				</para>
				<para>
					The &ucsUCR; output must be executed via the command
					<command>eval</command> for &ucsUCR; variables to be able to be read in a
					shell script as environment variables:
				</para>
				<programlisting language="sh">
# eval "$(univention-config-registry shell ldap/server/name)"
# echo "$ldap_server_name"
master.firma.de
				</programlisting>
			</section>
		</section>
	</section>

	<section id="ucr::templates::policy">
		<title>Policy-based configuration of UCR variables</title>
		<para>
			Part of the settings configured in &ucsUCR; are system-specific (e.g., the
			computer name); many settings can, however, be used on more then one
			computer. The <guimenu>Univention Configuration Registry</guimenu> policy
			managed in the UMC module <guimenu>Policies</guimenu> can be used
			to compile variables and apply them on more than one computer.
		</para>
		<figure id="policy-mailsize">
			<title>Policy-based configuration of the maximum mail size</title>
			<graphic scalefit="1" width="100%" fileref="illustrations44/computers_policy_mailsize_en.png"/>
		</figure>
		<para>
			Firstly, a <guimenu>Name</guimenu> must be set for the policy which is to be
			created, under which the variables will later be assigned to the individual
			computer objects.
		</para>
		<para>
			In addition, at least one <guimenu>Variable</guimenu> must be configured and a
			<guimenu>Value</guimenu> assigned.
		</para>
		<para>
			This policy can then be assigned to a computer object or a container/OU (see
			<xref linkend="central:policies:assign"/>). Note that the evaluation of
			configured values differs from other policies: the values are not forwarded
			directly to the computer, but rather written on the assigned computer by
			Univention Directory Policy. The time interval used for this is configured by
			the &ucsUCRV; <envar>ldap/policy/cron</envar> and is set to hourly as standard.
		</para>
	</section>

	<section id="ucr::templates::extend">
		<title>Modifying UCR templates</title>
		<para>
			In the simplest case, a &ucsUCR; template is a copy of the original
			configuration file in which the points at which the value of a variable are to
			be used contain a reference to the variable name.
		</para>
		<para>
			Inline Python code can also be integrated for more complicated scenarios, which
			then also allows more complicated constructions such as conditional
			assignments.
		</para>
		<note>
			<para>
			&ucsUCR; templates are included in the corresponding software packages as
			configuration files. When packages are updated, a check is performed for
			whether any changes have been made to the configuration files. If configuration
			files are no longer there in the form in which they were delivered, they will
			not be overwritten. Instead a new version will be created in the same directory
			with the ending <filename class="extension">.debian.dpkg-new</filename>. If changes are to be
			made on the &ucsUCR; templates, these templates are also not overwritten during
			the update and are instead re-saved in the same directory with the ending
			<filename class="extension">.dpkg-new</filename> or
			<filename class="extension">.dpkg-dist</filename>. Corresponding notes are written in the
			<filename>/var/log/univention/actualise.log</filename> log file. This only
			occurs if UCR templates have been locally modified.
			</para>
		</note>
		<para>
			The UCR templates are stored in the
			<filename class="directory">/etc/univention/templates/files/</filename> directory. The path to the
			templates is the absolute path to the configuration file with the prefixed path
			to the template directory. For example, the template for the
			<filename>/etc/issue</filename> configuration file can be found under
			<filename>/etc/univention/templates/files/etc/issue</filename>.
		</para>
		<para>
			For the configuration files to be processed correctly by &ucsUCR; they must be
			in UNIX format. If configuration files are edited in DOS or Windows, for
			example, control characters are inserted to indicate line breaks, which can
			disrupt the way &ucsUCR; uses the file.
		</para>

		<section id="ucr::templates::extend::simple">
			<title>Referencing of UCR variables in templates</title>
			<para>
				In the simplest case, a UCR variable can be directly referenced in the
				template. The variable name framed by the string <literal>@%@</literal>
				represents the wildcard. As an example the option for the activation of X11
				forwarding in the configuration file <filename>/etc/ssh/sshd_config</filename>
				of the OpenSSH server:
			</para>
			<programlisting>
X11Forwarding @%@sshd/xforwarding@%@
			</programlisting>
			<para>
				Newly added references to UCR variables are automatically evaluated by
				templates; additional registration is only required with the use of inline
				Python code (see <xref linkend="ucr::templates::extend::python"/>).
			</para>
		</section>

		<section id="ucr::templates::extend::python">
			<title>Integration of inline Python code in templates</title>
			<para>
				Any type of Python code can be embedded in UCR templates by entering a code
				block framed by the string <literal>@!@</literal>. For example, these blocks
				can be used to realize conditional requests so that when a parameter is changed
				via a variable, further dependent settings are automatically adopted in the
				configuration file. The following code sequence configures for example network
				settings using the &ucsUCR; settings:
			</para>
			<programlisting>
@!@
if configRegistry.get('apache2/ssl/certificate'):
    print 'SSLCertificateFile %s' % \
        configRegistry['apache2/ssl/certificate']
@!@
			</programlisting>
			<para>
				All the data output with the print function are written in the generated
				configuration file. The data saved in &ucsUCR; can be requested via the
				<classname>ConfigRegistry</classname> object, e.g.:
			</para>
			<programlisting>
@!@
if configRegistry.get('version/version') and \
        configRegistry.get('version/patchlevel'):
    print 'UCS %(version/version)s-%(version/patchlevel)s' % \
        configRegistry
@!@
			</programlisting>
			<para>
				In contrast to directly referenced UCR variables (see <xref
				linkend="ucr::templates::extend::simple"/>), variables accessed in inline
				Python code must be explicitly registered.
			</para>
			<para>
				The &ucsUCR; variables used in the configuration files are registered in
				<emphasis>info</emphasis> files in the
				<filename class="directory">/etc/univention/templates/info/</filename> directory which are usually
				named after the package name with the file ending
				<filename class="extension">.info</filename>. If new Python code is entered into the templates or
				the existing code changed in such a way that it requires additional or
				different variables, one of the existing <filename class="extension">.info</filename> files will
				need to be modified or a new one added.
			</para>
			<para>
				Following the changing of <filename class="extension">.info</filename> files, the
				<command>ucr update</command> command must be run.
			</para>
		</section>
	</section>
</section>

<section id="computers:Basic_system_services">
	<title>Basic system services</title>
	<para>
		This chapter describes basic system services of a UCS Installation such as the
		configuration of the PAM authentication framework, system logs and the NSCD.
	</para>

	<section id="computers:rootaccount">
		<title>Administrative access with the root account</title>
		<para>
			There is a <systemitem class="username">root</systemitem> account on every UCS system for complete
			administrative access. The password is set during installation of the
			system. The root user is not stored in the LDAP directory, but instead in the
			local user accounts.
		</para>
		<para>
			The password for the root user can be changed via the command line
			by using the <command>passwd</command> command.
			It must be pointed out that this process does not include any checks regarding
			either the length of the password or the passwords used in the past.
		</para>
	</section>

	<section id="computers:Configuration_of_language_and_keyboard_settings">
		<title>Configuration of language and keyboard settings</title>
		<para>
			In Linux, localization properties for software are defined in so-called
			<emphasis>locales</emphasis>. Configuration includes, among other things,
			settings for date and currency format, the set of characters in use and the
			language used for internationalized programs. The installed locales can be
			changed in &ucsUMC; under <guimenu>Language settings &ar; Installed
			system locales</guimenu> The standard locale is set under <guimenu>Default
			system locale</guimenu>.
		</para>
		<figure id="language-settings">
			<title>Configuring the language settings</title>
			<graphic scalefit="1" width="100%" fileref="illustrations44/computers_timezone_en.png"/>
		</figure>
		<para>
			The <guimenu>Keyboard layout</guimenu> in the menu entry <guimenu>Time zone and
			keyboard settings</guimenu> is applied during local logins to the system.
		</para>
	</section>

	<section id="computers:systemservices">
		<title>Starting/stopping system services / configuration of automatic startup</title>
		<para>
			The UMC module <guimenu>System services</guimenu> can be used to check the
			current status of a system service and to start or stop it as required.
		</para>
		<figure id="umc-services">
			<title>Overview of system services</title>
			<graphic scalefit="1" width="90%" align="center" fileref="illustrations44/umc-systemservices_en.png"/>
		</figure>
		<para>
			In this list of all the services installed on the system, the current running
			runtime status and a <guimenu>Description</guimenu> are displayed under
			<guimenu>Status</guimenu>. The service can be started, stopped or restarted
			under <guimenu>more</guimenu>.
		</para>
		<para>
			In the default setting, every service is started automatically when the system
			is started. In some situations, it can be useful not to have the service start
			directly, but instead only after further configuration. The action
			<guimenu>Start manually</guimenu> is used so that the service is not started
			automatically when the system is started, but can still be started
			subsequently. The action <guimenu>Start never</guimenu> also prevents
			subsequent service starts.
		</para>
	</section>

	<section id="computers:Authentication__PAM">
		<title>Authentication / PAM</title>
		<para>
			Authentication services in Univention Corporate Server are realized via
			<emphasis>Pluggable Authentication Modules</emphasis> (PAM). To this end
			different log-in procedures are displayed on a common interface so that a new
			log-in method does not require adaptation for existing applications.
		</para>

		<section id="computers:Limiting_authentication_to_selected_users">
			<title>Limiting authentication to selected users</title>
			<para>
				In the default setting, only the <systemitem class="username">root</systemitem> user and members of
				the <systemitem class="groupname">Domain Admins</systemitem> group can login remotely via SSH and
				locally on a <systemitem class="service">tty</systemitem>.
			</para>
			<para>
				This restriction can be configured with the &ucsUCRV;
				<envar>auth/SERVICE/restrict</envar>. Access to this service can be authorized
				by setting the variables <envar>auth/SERVICE/user/USERNAME</envar> and
				<envar>auth/SERVICE/group/GROUPNAME</envar> to <literal>yes</literal>.
			</para>
			<para>
				Login restrictions are supported for
				<systemitem class="service">SSH</systemitem> (<literal>sshd</literal>),
				<systemitem class="service">FTP</systemitem> (<literal>ftp</literal>),
				the login manager <systemitem class="service">KDM</systemitem> (<literal>kdm</literal>),
				login on a <systemitem class="service">tty</systemitem> (<literal>login</literal>),
				<systemitem class="service">rlogin</systemitem> (<literal>rlogin</literal>),
				<systemitem class="service">PPP</systemitem> (<literal>ppp</literal>)
				and other services (<literal>other</literal>).
				An example for <systemitem class="service">SSH</systemitem>:
			</para>
			<programlisting>
auth/sshd/group/Administrators: yes
auth/sshd/group/Computers: yes
auth/sshd/group/DC Backup Hosts: yes
auth/sshd/group/DC Slave Hosts: yes
auth/sshd/group/Domain Admins: yes
auth/sshd/restrict: yes
			</programlisting>
		</section>
	</section>

	<section id="computers:configureldapserver">
		<title>Configuration of the LDAP server in use</title>

		<para>
		  Several LDAP servers can be operated in a UCS domain. The primary one used is
		  specified with the &ucsUCRV; <envar>ldap/server/name</envar>, further servers
		  can be specified via the &ucsUCRV; <envar>ldap/server/addition</envar>.

		</para>

		<para>
		  Alternatively, the LDAP servers can also be specified via a <guimenu>LDAP
		  server</guimenu> policy in the UMC computer management. The order
		  of the servers determines the order of the computer's requests to the server if
		  a LDAP server cannot be reached.
		</para>

		<para>
		  In the default setting, only <envar>ldap/server/name</envar> is set following the
		  installation or the domain join. If there is more than one LDAP server available, it is advisable to
		  assign at least two LDAP servers using the <guimenu>LDAP server</guimenu> policy in order
		  to improve redundancy. In cases of an environment distributed over several
		  locations, preference should be given to LDAP servers from the local network.
		</para>

	</section>

	<section id="computers:configureprintserver">
		<title>Configuration of the print server in use</title>
		<para>
			The print server to be used can be specified with the &ucsUCRV;
			<envar>cups/server</envar>.
		</para>
		<para>
			Alternatively, the server can also be specified via the <guimenu>Print
			server</guimenu> policy in the UMC computer management.
		</para>
	</section>

	<section id="computers:Logging_retrieval_of_system_messages_and_system_status">
		<title>Logging/retrieval of system messages and system status</title>

		<section id="computers:Log_files">
			<title>Log files</title>
			<para>
				All UCS-specific log files (e.g., for the listener/notifier replication) are
				stored in the <filename class="directory">/var/log/univention/</filename> directory. Services log
				in their own standard log files: for example, Apache to the file
				<filename>/var/log/apache2/error.log</filename>.
			</para>
			<para>
				The log files are managed by <application>logrotate</application>. It ensures that log files are named in
				series in intervals (can be configured in weeks using the &ucsUCRV;
				<envar>log/rotate/weeks</envar>, with the default setting being 12) and older
				log files are then deleted. For example, the current log file for the
				Univention Directory Listener is found in the <filename>listener.log</filename>
				file; the one for the previous week in <filename>listener.log.1</filename>,
				etc.
			</para>
			<para>
			  Alternatively, log files can also be rotated only once
			  they have reached a certain size. For example, if they
			  are only to be rotated once they reach a size of 50 MB,
			  the &ucsUCRV; <envar>logrotate/rotates</envar> can be
			  set to <literal>size 50M</literal>.
			</para>
			<para>
				The &ucsUCRV; <envar>logrotate/compress</envar> is used to configure whether
				the older log files are additionally zipped with <command>gzip</command>.
			</para>
		</section>

		<section id="computers:Logging_the_system_status">
			<title>Logging the system status</title>
			<para>
				<command>univention-system-stats</command> can be used to document the current
				system status in the <filename>/var/log/univention/system-stats.log</filename>
				file. The following values are logged:
			</para>
			<itemizedlist>
				<listitem>
					<simpara>
					The free disk space on the system partitions (<command>df -lhT</command>)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					The current process list (<command>ps auxf</command>)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					Two <command>top</command> lists of the current processes and system
					load (<command>top -b -n2</command>)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					The current free system memory (<command>free</command>)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					The time elapsed since the system was started (<command>uptime</command>)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					Temperature, fan and voltage indexes from <application>lm-sensors</application> (<command>sensors</command>)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					A list of the current Samba connections (<command>smbstatus</command>)
					</simpara>
				</listitem>
			</itemizedlist>
			<para>
				The runtimes in which the system status should be logged can be defined in Cron
				syntax via the &ucsUCRV; <envar>system/stats/cron</envar>, e.g., <literal>0,30
				* * * *</literal> for logging every half and full hour. The logging is
				activated by setting the &ucsUCRV; <envar>system/stats</envar> to
				<literal>yes</literal>. This is the default since UCS 3.0.
			</para>
		</section>

		<section id="computers:Querying_system_statistics_in_the_UMC">
			<title>Querying system statistics in &ucsUMC;</title>
			<para>
				The UMC module <guimenu>Statistics</guimenu> displays the utilization of system
				resources. For this purpose, a graph is displayed for different periods:
			</para>
			<itemizedlist>
				<listitem><simpara>The past 24 hours</simpara></listitem>
				<listitem><simpara>The past week</simpara></listitem>
				<listitem><simpara>The past month</simpara></listitem>
				<listitem><simpara>The past year</simpara></listitem>
			</itemizedlist>
			<para>
				The following system information is documented:
			</para>
			<itemizedlist>
				<listitem><simpara>The utilization of the main memory in percent</simpara></listitem>
				<listitem><simpara>The processor utilization of the system</simpara></listitem>
				<listitem><simpara>The number of terminal server sessions active</simpara></listitem>
				<listitem><simpara>The utilization of the swap file</simpara></listitem>
			</itemizedlist>
		</section>

		<section id="computers:modules:top">
			<title>Process overview in &ucsUMC;</title>
			<para>
				The UMC module <guimenu>Process overview</guimenu> displays a
				table of the current processes on the system. The processes can be sorted based
				on the following properties by clicking on the corresponding table header:
			</para>
			<itemizedlist>
				<listitem><simpara>CPU utilization in percent</simpara></listitem>
				<listitem><simpara>The user name under which the process is running</simpara></listitem>
				<listitem><simpara>Memory consumption in percent</simpara></listitem>
				<listitem><simpara>The process ID</simpara></listitem>
			</itemizedlist>
			<para>
				The menu item <guimenu>more</guimenu> can be used to terminate
				processes. Two different types of termination are possible:
			</para>
			<itemizedlist>
				<listitem>
					<simpara>
					The action <guimenu>Terminate</guimenu> sends the process a <systemitem class="event">SIGTERM</systemitem>
					signal; this is the standard method for the controlled termination of programs.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					Sometimes, it may be the case that a program - e.g., after
				crashing - can no longer be terminated with this procedure. In this case, the
				action <guimenu>Force terminate</guimenu> can be used to send the signal
				<systemitem class="event">SIGKILL</systemitem> and force the process to terminate.
					</simpara>
				</listitem>
			</itemizedlist>
			<para>
				As a general rule, terminating the program with <systemitem class="event">SIGTERM</systemitem> is preferable
				as many programs then stop the program in a controlled manner and, for example,
				save open files.
			</para>
		</section>
		<section id="computers:modules:diagnostic"><title>System error diagnosis in &ucsUMC;</title>
			<para>
				The <guimenu>System diagnostic</guimenu> UMC module offers a
				corresponding user interface to analyze a UCS system for a
				range of known problems.
			</para>
			<para>
				The module evaluates a range of problem scenarios known to it
				and suggests solutions if it is able to resolve the identified
				solutions automatically. This function is displayed via
				ancillary buttons. In addition, links are shown to further
				articles and corresponding UMC modules.
			</para>
		</section>
	</section>

	<section id="computers:Executing_recurring_actions_with_Cron">
		<title>Executing recurring actions with Cron</title>
		<para>
			Regularly recurring actions (e.g., the processing of log files) can be started
			at a defined time with the Cron service. Such an action is known as a cron job.
		</para>

		<section id="computers:Hourly_daily_weekly_monthly_execution_of_scripts">
			<title>Hourly/daily/weekly/monthly execution of scripts</title>
			<para>
				Four directories are predefined on every UCS system,
				<filename class="directory">/etc/cron.hourly/</filename>, <filename class="directory">/etc/cron.daily/</filename>,
				<filename class="directory">/etc/cron.weekly/</filename> and
				<filename class="directory">/etc/cron.monthly/</filename>. Shell scripts which are placed in
				these directories and marked as executable are run automatically every hour,
				day, week or month.
			</para>
		</section>

		<section id="cron:local">
			<title>Defining local cron jobs in <filename class="directory">/etc/cron.d/</filename></title>
			<para>
				A cron job is defined in a line, which is composed of a total of seven columns:
			</para>
			<itemizedlist>
				<listitem><simpara>Minute (0-59)</simpara></listitem>
				<listitem><simpara>Hour (0-23)</simpara></listitem>
				<listitem><simpara>Day (1-31)</simpara></listitem>
				<listitem><simpara>Month (1-12)</simpara></listitem>
				<listitem><simpara>Weekday (0-7) (0 and 7 both stand for Sunday)</simpara></listitem>
				<listitem><simpara>Name of user executing the job (e.g., root)</simpara></listitem>
				<listitem><simpara>The command to be run</simpara></listitem>
			</itemizedlist>
			<para>
				The time specifications can be set in different ways. One can specify a
				specific minute/hour/etc. or run an action every minute/hour/etc. with an
				*. Intervals can also be defined, for example */2 as a minute specification
				runs an action every two minutes.
			</para>
			<para>
				Some examples:
			</para>
			<programlisting>
30 * * * * root /usr/sbin/jitter 600 /usr/share/univention-samba/slave-sync
*/5 * * * * www-data /usr/bin/php -q /usr/share/horde/reminders.php
			</programlisting>
		</section>

		<section id="computers:Defining_cron_jobs_in_Univention_Configuration_Registry">
			<title>Defining cron jobs in Univention Configuration Registry</title>
			<para>
				Cron jobs can also be defined in &ucsUCR;. This is particularly useful if
				they are set via a &ucsUDM; policy and are thus used on more than one computer.
			</para>
			<para>
				Each cron job is composed of at least two &ucsUCR; variables. <replaceable>JOBNAME</replaceable> is a
				general description.
			</para>
			<itemizedlist>
				<listitem>
					<simpara>
					<command>cron/JOBNAME/command</command> specifies the command to be
					run (required)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					<command>cron/JOBNAME/time</command> specifies the execution time
					(see <xref linkend="cron:local"/>) (required)
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					As standard, the cron job is run as a user
					<systemitem class="username">root</systemitem>. <command>cron/JOBNAME/user</command> can be used to
					specify a different user.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					If an e-mail address is specified under
					<command>cron/JOBNAME/mailto</command>, the output of the cron job is sent
					there per e-mail.
					</simpara>
				</listitem>
				<listitem>
					<simpara>
					<command>cron/JOBNAME/description</command> can be used to provide a
					description.
					</simpara>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section id="computers:nscd">
		<title>Name service cache daemon</title>
		<para>
			Data of the NSS service is cached by the <emphasis>Name Server Cache
			Daemon</emphasis> (NSCD) in order to speed up frequently recurring requests for
			unchanged data. Thus, if a repeat request occurs, instead of a complete LDAP
			request to be processed, the data are simply drawn directly from the cache.
		</para>

		<para>
		  Since UCS 3.1, the groups are no longer cached via the NSCD for performance and
		  stability reasons; instead they are now cached by a local group cache, see <xref
		  linkend="groups::cache"/>.
		</para>

		<para>
			The central configuration file of the (<filename>/etc/nscd.conf</filename>) is
			managed by &ucsUCR;.
		</para>
		<para>
			The access to the cache is handled via a hash table. The size of the hash table
			can be specified in &ucsUCR;, and should be higher than the number of
			simultaneously used users/hosts. For technical reasons, a prime number
			should be used for the size of the table. The following table shows the
			standard values of the variables:
		</para>
		<table>
			<title>Default size of the hash table</title>
			<tgroup cols="2">
				<colspec colnum="1" colname="col1" colwidth="1*"/>
				<colspec colnum="2" colname="col2" colwidth="2*"/>
				<thead>
					<row>
						<entry>Variable</entry>
						<entry>Default size of the hash table</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<command>nscd/hosts/size</command>
						</entry>
						<entry>6007</entry>
					</row>
					<row>
						<entry>
							<command>nscd/passwd/size</command>
						</entry>
						<entry>6007</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			With very big caches it may be necessary to increase the size of the cache
			database in the system memory. This can be configured through the &ucsUCR;
			variables <envar>nscd/hosts/maxdbsize</envar>,
			<envar>nscd/group/maxdbsize</envar> and <envar>nscd/passwd/maxdbsize</envar>.
		</para>
		<para>
			As standard, five threads are started by NSCD. In environments with many
			accesses it may prove necessary to increase the number via the &ucsUCRV;
			<envar>nscd/threads</envar>.
		</para>
		<para>
			In the basic setting, a resolved group or host name is kept in cache for one
			hour, a user name for ten minutes. With the &ucsUCR; variables
			<envar>nscd/group/positive_time_to_live</envar> and
			<envar>nscd/passwd/positive_time_to_live</envar> these periods can be extended
			or diminished (in seconds).
		</para>
		<para>
			From time to time it might be necessary to manually invalidate the cache of the
			NSCD. This can be done individually for each cache table with the following
			commands:
		</para>
		<programlisting language="sh">
nscd -i passwd
nscd -i hosts
		</programlisting>
		<para>
			The verbosity of the log messages can be configured through the &ucsUCRV;
			<envar>nscd/debug/level</envar>.
		</para>
	</section>

    <section id="computers:xrdp">
        <title>RDP login to systems using XRDP</title>
        <para>
            XRDP is a daemon running on &ucsUCS;, which allows users to open a X session on
            the server using the <ulink
            url="https://en.wikipedia.org/wiki/Remote_Desktop_Protocol">Remote Desktop
            Protocol (RDP)</ulink>. This protocol is natively supported by Microsoft
            Windows and many other operating systems and thus does not require additional
            software to be installed on the client PCs.
        </para>

        <section id="computers:xrdp:installation">
            <title>Installation</title>
            <para>
                XRDP is available through the App Center (see <xref
                linkend="software:appcenter"/>) and can be installed using the corresponding
                &ucsUMC; module App Center. It can be installed on multiple machines. After the
                installation the machine runs a <ulink url="http://www.xrdp.org/">XRDP
                server</ulink>.
            </para>
        </section>

        <section id="computers:xrdp:configuration">
            <title>Configuration</title>

            <section id="computers:xrdp:allowed_users">
                <title>Allowed users</title>

                <para>
                    By default all users of the UNIX group <systemitem class="groupname">Domain
                    Admins</systemitem> are allowed to connect using RDP. The name of the group can
                    be changed by setting the &ucsUCRV; <envar>xrdp/access/admins</envar>.
                </para>
            </section>

            <section id="computers:xrdp:concurrent_sessions">
                <title>Maximum number of concurrent sessions</title>

                <para>
                    The maximum number of concurrently running RDP sessions is by default limited
                    to <literal>10</literal> and can be changed using the &ucsUCRV;
                    <envar>xrdp/sessions/max</envar>.
                </para>
            </section>

            <section id="computers:xrdp:login_customization">
                <title>Login window customization</title>

                <para>
                    The title and the images used in the login windows can be configured using the
                    &ucsUCRV; <envar>xrdp/title</envar> and <envar>xrdp/imagedir</envar>. The
                    directory must contain 4 images using the Windows bitmap format. The first two
                    are used as the rectangular logo at the left side on the input fields, the
                    other two are used for the banner displayed below the input window:
                </para>
                <variablelist>
                  <varlistentry>
                    <term><filename>ad24b.bmp</filename></term>
                    <listitem>
                      <simpara>24 bit color logo, 140 x 140</simpara>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><filename>ad256.bmp</filename></term>
                    <listitem>
                      <simpara>256 color logo, 140 x 140</simpara>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><filename>xrdp24b.bmp</filename></term>
                    <listitem>
                      <simpara>24 bit color banner, 256 x 192</simpara>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><filename>xrdp256.bmp</filename></term>
                    <listitem>
                      <simpara>256 color banner, 256 x 192</simpara>
                    </listitem>
                  </varlistentry>
                </variablelist>
            </section>
        </section>

        <section id="computers:xrdp:client_software">
            <title>Client software</title>

            <itemizedlist>
                <listitem>
                  <simpara>Microsoft Windows has a built-in RDP client. It will show a
                  certificate warning as long as the UCS certificate has not been
                  imported.
                  </simpara>
                </listitem>
                <listitem>
                  <simpara>UCS and many other Linux distributions include <ulink
                  url="http://www.rdesktop.org/">rdesktop</ulink> and <ulink
                  url="http://www.freerdp.com/">FreeRDP</ulink>.
                  </simpara>
                </listitem>
                <listitem>
                  <simpara>For Apple iOS there is <ulink url="http://www.irdesktop.com/">iResktop</ulink>.</simpara>
                </listitem>
                <listitem>
                  <simpara>For Android there are <ulink url="https://play.google.com/store/search?q=rdp+client%26c=apps">multiple apps</ulink>.</simpara>
                </listitem>
            </itemizedlist>
        </section>

        <section id="computers:xrdp:know_issues">
            <title>Known issue: Wrong keyboard layout</title>

            <para>
                When you log into KDE using XRDP, the keyboard is configured to use the US
                layout by default. To change this open the K-Menu, switch to the
                <guimenu>Computer tab</guimenu>, open <guimenu>System settings</guimenu>, then
                open the <guimenu>Regional &amp; Languages</guimenu> in the Personal section.
                There open <guimenu>Keyboard Layout</guimenu>, select <guimenu>Enable keyboard
                layouts</guimenu> and add the requested layout from the left list of available
                layouts. Click the right arrow to add the layout and reorder it to the top in
                the right list of <guimenu>Active layouts</guimenu> using the up/down buttons.
                Apply the changes and close the application. For background information see
                <ulink url="https://github.com/FreeRDP/FreeRDP/wiki/Keyboard">the project
                documentation</ulink>.
            </para>
        </section>

        <section id="computers:xrdp:alternatives">
            <title>Alternatives</title>

            <variablelist>
              <varlistentry>
                <term>VNC</term>
                <listitem>
                  <simpara>Virtual Network Connect provides a simpler protocol, which is used by KVM for example. </simpara>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>SSH</term>
                <listitem>
                  <simpara>Only provides a text console by default, but can be used to tunnel X sessions natively.</simpara>
                </listitem>
              </varlistentry>
            </variablelist>
        </section>
    </section>

	<section id="computers:SSH_login_to_systems">
		<title>SSH login to systems</title>
		<para>
			When installing a UCS system, an SSH server is also installed per
			preselection. SSH is used for realizing encrypted connections to other hosts,
			wherein the identity of a host can be assured via a check sum. Essential
			aspects of the SSH server's configuration can be adjusted in &ucsUCR;.
		</para>
		<para>
			By default the login of the privileged <systemitem class="username">root</systemitem> user is
			permitted by SSH (e.g. for configuring a newly installed system where no users
			have been created yet, from a remote location).
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
				If the &ucsUCRV; <envar>sshd/permitroot</envar> is set to
				<literal>without-password</literal>, then no interactive password request
				will be performed for the <systemitem class="username">root</systemitem> user, but only a login
				based on a public key. By this means brute force attacks to passwords can be
				avoided.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
				To prohibit SSH login completely, this can be deactivated by setting
				the &ucsUCRV; <envar>auth/sshd/user/root</envar> to <literal>no</literal>.
				</simpara>
			</listitem>
		</itemizedlist>
		<para>
			The &ucsUCRV; <envar>sshd/xforwarding</envar> can be used to configure whether
			an X11 output should be passed on via SSH. This is necessary, for example, for
			allowing a user to start a program with graphic output on a remote computer by
			logging in with <command>ssh -X TARGETHOST</command>. Valid settings are
			<literal>yes</literal> and <literal>no</literal>.
		</para>
		<para>
			The standard port for SSH connections is port 22 via TCP. If a different port
			is to be used, this can be arranged via the &ucsUCRV; <envar>sshd/port</envar>.
		</para>
	</section>

	<section id="basicservices::ntp">
		<title>Configuring the time zone / time synchronization</title>
		<para>
			The time zone in which a system is located can be changed in &ucsUMC; under
			<guimenu>Language settings &ar; Time zone</guimenu>.
		</para>
		<para>
			Asynchronous system times between individual hosts of a domain can be the
			source of a large number of errors: the reliability of log files is impaired;
			Kerberos operation is disrupted; the correct evaluation of the validity periods
			of passwords can be disturbed; etc.
		</para>
		<para>
			Usually the &ucsMaster; functions as the time server of a
			domain. With the &ucsUCR; variables <envar>timeserver</envar>,
			<envar>timeserver2</envar> and <envar>timeserver3</envar> external NTP servers
			can be included as time sources.
		</para>
		<para>
			Manual time synchronization can be started by the command
			<command>ntpdate</command>.
		</para>
		<para>
			Windows clients joined in a Samba 4 domain only accept signed NTP time
			requests. If the &ucsUCRV; <envar>ntp/signed</envar> is set to
			<literal>yes</literal>, the NTP replies are signed by Samba 4.
		</para>
	</section>
</section>

</chapter>
